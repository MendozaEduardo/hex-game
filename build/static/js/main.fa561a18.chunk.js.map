{"version":3,"sources":["assets/Doge.jpg","utils/gameFunctions.js","context/actions.js","context/reducer.js","context/GlobalState.js","components/Banner.js","components/GameToolbar.js","components/Card.js","components/Board.js","utils/dogeComments.js","components/Doge.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initializeGame","game","cards","objective","id","length","push","color","Math","floor","random","Reducer","state","initialState","action","type","score","Context","createContext","GlobalState","children","useReducer","dispatch","Provider","value","Banner","useContext","className","GameToolbar","props","AppBar","position","Button","onClick","Card","height","width","style","backgroundColor","Board","useState","dimension","setDimension","resizeBoard","min","document","documentElement","clientWidth","clientHeight","useEffect","resizeListener","window","addEventListener","removeEventListener","Grid","container","spacing","direction","alignItems","justify","map","card","key","DogeComments","Doge","dimensions","shortestDimension","console","log","getDimension","array","classes","makeStyles","root","paddingTop","display","flexDirection","maxWidth","maxHeight","useStyles","Container","CardMedia","image","DogeImg","title","CardContent","Typography","align","variant","component","Home","StrictMode","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fa561a18.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Doge.cccfd52c.jpg\";","// Generates random RGB values\nfunction randomColor() {\n    //pick a red from 0-255//\n    var r = Math.floor(Math.random() * 256);\n    //green from 0-255//\n    var g = Math.floor(Math.random() * 256);\n    //blue from 0-255//\n    var b = Math.floor(Math.random() * 256);\n    return \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\n}\n\nexport function pickColor(cards, colorArray) {\n    colorArray = [];\n    cards.forEach((element) => {\n        colorArray.push(element.color);\n    });\n    console.log(\"Color Array: \", colorArray);\n    var random = Math.floor(Math.random() * colorArray.length);\n    console.log(\"Color:\", colorArray[random]);\n    return colorArray[random];\n}\n\nexport function resizeBoard() {\n    Math.min(document.documentElement.clientWidth, document.documentElement.clientHeight);\n}\n\nexport function getRandomIndex(array) {\n    var random = Math.floor(Math.random() * array.length);\n    return random;\n}\n\nexport function initializeGame(game) {\n    game.cards = [];\n    game.objective = null;\n    //generate the colors\n    var id = 0;\n    while (game.cards.length < 6) {\n        game.cards.push({\n            id: id++,\n            color: randomColor(),\n        });\n    }\n\n    // pick a color within the colors array to be objective\n    var random = Math.floor(Math.random() * game.cards.length);\n    game.objective = game.cards[random].color;\n}\n","export const NEXT_ROUND = \"NEXT_ROUND\";\nexport const RESET = \"RESET\";\n","import { NEXT_ROUND, RESET } from \"./actions\";\nimport { initialState } from \"./GlobalState\";\nimport { initializeGame } from \"../utils/gameFunctions\";\n\nconst game = {\n    cards: [],\n    objective: null,\n    \n};\n\nfunction Reducer(state = initialState, action) {\n    switch (action.type) {\n        case NEXT_ROUND:\n            initializeGame(game);\n            return {\n                score: state.score + 1,\n                cards: game.cards,\n                objective: game.objective,\n            };\n        case RESET:\n            initializeGame(game);\n            return {\n                score: 0,\n                cards: game.cards,\n                objective: game.objective,\n            };\n        default:\n            return state;\n    }\n}\n\nexport default Reducer;\n","import React, { useReducer, createContext } from \"react\";\nimport { initializeGame } from \"../utils/gameFunctions\";\nimport Reducer from \"./reducer\";\n\nconst game = {\n    cards: [],\n    objective: null,\n    \n};\n\ninitializeGame(game);\n\nexport const initialState = {\n    score: 0,\n    cards: game.cards,\n    objective: game.objective,\n};\n\nconst GlobalState = ({ children }) => {\n    const [state, dispatch] = useReducer(Reducer, initialState);\n\n    return <Context.Provider value={[state, dispatch]}>{children}</Context.Provider>;\n};\n\nexport const Context = createContext(initialState);\n\nexport default GlobalState;\n","import React, { useContext } from \"react\";\nimport { Context } from \"../context/GlobalState\";\n\nconst Banner = () => {\n    const [state] = useContext(Context);\n    let { objective } = state;\n\n    return (\n        <div className=\"banner\">\n            <h1>The Paw-some Hex Game</h1>\n            <span id=\"colorDisplay\">\n                <strong>Objective: </strong>\n                {objective ? objective : \"RGB\"}\n            </span>\n        </div>\n    );\n};\n\nexport default Banner;\n","import React, { useContext } from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { RESET } from \"../context/actions\";\nimport { Context } from \"../context/GlobalState\";\n\nconst GameToolbar = (props) => {\n    const [state, dispatch] = useContext(Context);\n\n    return (\n        <AppBar className=\"toolbar\" position=\"static\">\n            <Button\n                id=\"reset\"\n                color=\"inherit\"\n                onClick={() => {\n                    dispatch({ type: RESET });\n                }}\n            >\n                Reset\n            </Button>\n        </AppBar>\n    );\n};\nexport default GameToolbar;\n","import React, { useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { NEXT_ROUND, RESET } from \"../context/actions\";\n\nimport { Context } from \"../context/GlobalState\";\n\nexport default function Card({ height, width, color }) {\n    const [state, dispatch] = useContext(Context);\n    const { objective } = state;\n\n    // Circle click logic, compare with global value for the goal, determine if it's right or wrong\n\n    return (\n        <div\n            className=\"card\"\n            style={{ backgroundColor: color, width: width, height: height }}\n            onClick={() => {\n                color === objective ? dispatch({ type: NEXT_ROUND }) : dispatch({ type: RESET });\n            }}\n        />\n    );\n}\n\nCard.propTypes = {\n    id: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n};\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { Grid } from \"@material-ui/core\";\n\nimport Card from \"../components/Card\";\nimport { Context } from \"../context/GlobalState\";\n\nexport default function Board() {\n    const [dimension, setDimension] = useState(400);\n    const [state] = useContext(Context);\n\n    useEffect(resizeBoard, []);\n\n    useEffect(() => {\n        const resizeListener = window.addEventListener(\"resize\", resizeBoard);\n        return () => window.removeEventListener(\"resize\", resizeListener);\n    }, []);\n\n    function resizeBoard() {\n        setDimension(\n            Math.min(document.documentElement.clientWidth, document.documentElement.clientHeight)\n        );\n    }\n    return (\n        <Grid\n            container\n            spacing={0}\n            className=\"board\"\n            direction=\"row\"\n            alignItems=\"center\"\n            justify=\"center\"\n        >\n            {state.cards.map((card) => (\n                <Card\n                    color={card.color}\n                    id={card.id}\n                    key={card.id}\n                    height={dimension / 8}\n                    width={dimension / 8}\n                />\n            ))}\n        </Grid>\n    );\n}\n","export const DogeComments = [\n    // Positive\n    [\"And they say I'M the good boy\", \"Wow, you deserve a treato\", \"Much good, so wow\"],\n    // Begin information\n    [\"Match the color code to the corresponding circle\"],\n];\n","import React, { useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Card, Container, Grid, Paper } from \"@material-ui/core\";\nimport { useMediaQuery } from \"@material-ui/core/useMediaQuery\";\n\nimport DogeImg from \"../assets/Doge.jpg\";\nimport { Context } from \"../context/GlobalState\";\nimport { DogeComments } from \"../utils/dogeComments\";\nimport { getRandomIndex } from \"../utils/gameFunctions\";\n\nfunction getDimension() {\n    var shortestDimension = Math.min(\n        document.documentElement.clientWidth,\n        document.documentElement.clientHeight\n    );\n\n    console.log(\"Shortest Dimension: \", shortestDimension);\n    return shortestDimension;\n}\n\nexport default function Doge() {\n    let dimensions = {\n        width: null,\n        height: null,\n    };\n\n    if (getDimension() < 500) {\n        dimensions.width = 350;\n        dimensions.height = 150;\n    } else {\n        dimensions.width = 650;\n        dimensions.height = 350;\n    }\n\n    const useStyles = makeStyles({\n        root: {\n            paddingTop: 30,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            maxWidth: 800,\n            maxHeight: 550,\n        },\n        dimensions,\n    });\n\n    const classes = useStyles();\n    const [state] = useContext(Context);\n    const { score, objective } = state;\n\n    return (\n        <Container className={classes.root} maxWidth=\"md\">\n            <Card>\n                <CardMedia className={classes.dimensions} image={DogeImg} title=\"Doge\" />\n                <CardContent>\n                    <Typography align=\"center\" variant=\"h6\" component=\"h4\">\n                        {score > 0\n                            ? DogeComments[0][getRandomIndex(DogeComments)]\n                            : DogeComments[1]}\n                    </Typography>\n                    <Typography align=\"center\" variant=\"h6\" component=\"h4\">\n                        <strong>Score:</strong>\n                        {score}\n                    </Typography>\n                </CardContent>\n            </Card>\n        </Container>\n    );\n}\n","import React from \"react\";\n\nimport Banner from \"../components/Banner\";\nimport GameToolbar from \"../components/GameToolbar\";\nimport Board from \"../components/Board\";\nimport Doge from \"../components/Doge\";\n\nconst Home = () => {\n    return (\n        <>\n            <React.StrictMode>\n                <Banner/>\n                <GameToolbar />\n                <Doge />\n                <Board />\n            </React.StrictMode>\n        </>\n    );\n};\n\nexport default Home;\n","import React from \"react\";\nimport Home from \"../src/pages/Home\";\nimport Store from \"./context/GlobalState\";\n\nfunction App() {\n    return (\n        <Store>\n            <Home className=\"app\"/>;\n        </Store>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}